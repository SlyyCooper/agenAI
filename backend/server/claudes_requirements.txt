# Token-Documentation:

## Overview:
### The token system works as follows:
1. New users start with 0 tokens
2. When a one-time purchase is made:
   - User gets 5 new tokens
   - A token history entry is created with:
     - amount: 5
     - type: 'purchase'
     - timestamp: server timestamp
3. Token history is tracked using Firestore's ArrayUnion for atomic updates
4. Token balance is updated using Firestore's Increment operation

- The backend server uses tokens to track user purchases and grant access to the app. 
- Tokens are used to determine whether a user has access to the app and to track one-time purchases. 
- The following files are relevant for token handling:

## The complete token system implementation across the files:

### 1. stripe_utils.py: tokens are handled in the `fulfill_order` function during one-time payments:

````python:backend/server/firebase/stripe_utils.py
# ... existing code ...
elif session['mode'] == 'payment':
    update_data.update({
        'one_time_purchase': True,
        'purchase_date': firestore.SERVER_TIMESTAMP,
        'product_id': os.getenv("STRIPE_ONETIME_PRODUCT_ID"),
        'price_id': os.getenv("STRIPE_ONETIME_PRICE_ID"),
        'tokens': firestore.Increment(5),  # Adds 5 tokens
        'token_history': firestore.ArrayUnion([{
            'amount': 5,
            'type': 'purchase',
            'timestamp': firestore.SERVER_TIMESTAMP
        }])
    })
````

### 2. firestore_utils.py: tokens are initialized in `create_user_profile`:

````python:backend/server/firebase/firestore_utils.py
user_data = {
    'email': email,
    'created_at': current_time,
    'last_login': current_time,
    'stripe_customer_id': customer.id,
    'has_access': False,
    'one_time_purchase': False,
    'tokens': 0  # Initializes tokens to 0
}
````

### 3. Frontend:

#### From `models.ts`:
```typescript:frontend/nextjs/api/types/models.ts
// User Profile Data includes tokens
export interface UserProfileData {
  // ... other fields ...
  tokens: number
  one_time_purchase: boolean
}

// Token Transaction Model
export interface TokenTransaction {
  amount: number
  type: 'purchase'
  timestamp: Date
}

// Update User Data can modify tokens
export interface UserDataUpdate {
  // ... other fields ...
  tokens?: number
  one_time_purchase?: boolean
}
```

#### 1. `userprofileAPI.ts`, endpoints that handle token-related data:
```typescript:frontend/nextjs/api/userprofileAPI.ts
// Gets user profile including token balance
export const getUserProfile = async (): Promise<UserProfileData> => {
  // ... implementation ...
};

// Can update token balance
export const updateUserProfile = async (data: UserDataUpdate): Promise<UserProfileData> => {
  // ... implementation ...
};
```

#### 2. `stripeAPI.ts`, payment endpoint that triggers token updates:
```typescript:frontend/nextjs/api/stripeAPI.ts
// Creates checkout session for one-time purchase that grants tokens
export const createCheckoutSession = async (
  price_id: string,
  mode: 'subscription' | 'payment'
): Promise<void> => {
  // ... implementation ...
};
```

This completes the token system documentation showing:
1. Frontend models for tracking tokens
2. API endpoints for viewing/updating token balance
3. Payment integration that triggers token updates
4. All tied to the backend implementation we found earlier